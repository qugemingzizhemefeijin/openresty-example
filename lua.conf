#lua.conf
server {
    listen       80;
    server_name  openresty;
    #注意一定在生产环境开启lua_code_cache，否则每个请求都会创建Lua VM实例。
    lua_code_cache off;

    #Hello World
    location /hello {
        default_type 'text/html';
        content_by_lua_file /opt/openresty/openresty-example/lua/hello.lua;
    }

    #读取请求的头，body参数等信息以及设置nginx变量和修改nginx变量
    location ~ /lua_request/(\d+)/(\d+) {
        #设置nginx变量
        set $a $1;
        set $b $host;
        default_type "text/html";
        #nginx内容处理
        content_by_lua_file /opt/openresty/openresty-example/lua/test_1_request.lua;
        #内容体处理完成后调用
        echo_after_body "ngx.var.b $b";
    }

    #返回请求头信息，输出内容体
    location /lua_response_1 {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_1_response.lua;
    }

    #跳转
    location /lua_response_2 {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_2_response.lua;
    }

    #其他API，URL编码和解码，参数编码和解码，MD5，Base64等加密
    location /lua_other {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_3_other.lua;
    }

    #Nginx全局内存
    #首先在nginx.conf的http部分分配内存大小
    #lua_shared_dict shared_data 1m;
    location /lua_shared_dict {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_4_lua_shared_dict.lua;
    }

    #测试lua_init的功能
    #需要额外的在nginx http模块配置
    #init_by_lua_file /opt/openresty/openresty-example/lua/test_5_init.lua;
    location /lua_init {
        #因为开启了lua_code_cache off，所以此全局和局部变量会一直没变化，可以查实关闭此参数
        lua_code_cache on;
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_5_init_response.lua;
    }

}
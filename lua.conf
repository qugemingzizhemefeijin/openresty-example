#lua.conf
server {
    listen       80;
    server_name  openresty;
    #注意一定在生产环境开启lua_code_cache，否则每个请求都会创建Lua VM实例。
    lua_code_cache off;

    #Hello World
    location /hello {
        default_type 'text/html';
        content_by_lua_file /opt/openresty/openresty-example/lua/hello.lua;
    }

    #读取请求的头，body参数等信息以及设置nginx变量和修改nginx变量
    location ~ /lua_request/(\d+)/(\d+) {
        #设置nginx变量
        set $a $1;
        set $b $host;
        default_type "text/html";
        #nginx内容处理
        content_by_lua_file /opt/openresty/openresty-example/lua/test_1_request.lua;
        #内容体处理完成后调用
        echo_after_body "ngx.var.b $b";
    }

    #返回请求头信息，输出内容体
    location /lua_response_1 {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_1_response.lua;
    }

    #跳转
    location /lua_response_2 {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_2_response.lua;
    }

    #其他API，URL编码和解码，参数编码和解码，MD5，Base64等加密
    location /lua_other {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_3_other.lua;
    }

    #Nginx全局内存
    #首先在nginx.conf的http部分分配内存大小
    #lua_shared_dict shared_data 1m;
    location /lua_shared_dict {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_4_lua_shared_dict.lua;
    }

    #测试lua_init的功能
    #需要额外的在nginx http模块配置
    #init_by_lua_file /opt/openresty/openresty-example/lua/test_5_init.lua;
    location /lua_init {
        #因为开启了lua_code_cache off，所以此全局和局部变量会一直没变化，可以查实关闭此参数
        lua_code_cache on;
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_5_init_response.lua;
    }

    #set_by_lua的功能测试
    #访问如http://127.0.0.1/lua_set_1?i=1&j=10进行测试。 如果我们用纯set指令是无法实现的。
    location /lua_set_1 {
        default_type "text/html";
        set_by_lua_file $num /opt/openresty/openresty-example/lua/test_7_set_by_lua.lua;
        echo $num;
    }

    #再举个实际例子，我们实际工作时经常涉及到网站改版，有时候需要新老并存，或者切一部分流量到新版
    #可以是用nginx的map指令来映射host到指定nginx变量，方便我们测试
    #map指定配置段在http中
    #请参考nginx.conf中的map配置
    #但是我们想把商品编号为为8位(比如品类为图书的)没有改版完成，需要按照相应规则跳转到老版，但是其他的到新版；虽然使用if指令能实现，但是比较麻烦，基本需要这样
    #
    location /lua_set_2 {
        default_type "text/html";

        #如绑定hosts
        #192.168.20.31 item.jd.com;
        #192.168.20.31 item2014.jd.com;

        #简单配置
        #if ($item_dynamic = "1") {
        #    rewrite ^/(.*) http://www.baidu.com redirect;#old
        #}
        #rewrite ^/(.*) http://www.jd.com redirect;#new

        #复杂的if配置
        set $jump "0";
        if ($item_dynamic = "1") {
            set $jump "1";
        }
        if ($uri ~ "/lua_set_2/6[0-9]{7}") {
            set $jump "${jump}2";
        }

        #非强制访问新版，且访问指定范围的商品
        #http://item.jd.com/lua_set_2/11010100
        if ($jump = "02") {
           rewrite ^/(.*) http://www.baidu.com redirect;#old
        }
        #http://item.jd.com/lua_set_2/010101
        rewrite ^/(.*) http://www.jd.com redirect;#new

        #以上规则还是比较简单的，如果涉及到更复杂的多重if/else或嵌套if/else实现起来就更痛苦了，可能需要到后端去做了；此时我们就可以借助lua了：
    }

    #set_by_lua的功能测试3
    location /lua_set_3 {
        default_type "text/html";

        if ($uri ~ "^/lua_set_3/([0-9]+)") {
           set $skuId $1;
        }

        #访问 http://item.jd.com/lua_set_3/111111 到 京东首页
        #访问 http://item.jd.com/lua_set_3/88888888 到 自营图书
        #访问 http://item.jd.com/lua_set_3/999999999 到 自营音响

        set_by_lua_file $to_book /opt/openresty/openresty-example/lua/test_7_set_by_lua_3_1.lua;
        set_by_lua_file $to_mvd /opt/openresty/openresty-example/lua/test_7_set_by_lua_3_2.lua;

        #自营图书
        if ($to_book) {
            rewrite ^/(.*) https://book.jd.com redirect;
        }
        #自营音像
        if ($to_mvd) {
            rewrite ^/(.*) https://mvd.jd.com redirect;
        }
        #默认
        rewrite ^/(.*) http://www.jd.com redirect;
    }

    #rewrite_by_lua 功能测试1
    location /lua_rewrite_1 {
        default_type "text/html";
        rewrite_by_lua_file /opt/openresty/openresty-example/lua/test_8_rewrite_by_lua.lua;
        echo "no rewrite";
    }

    #rewrite_by_lua 功能测试2
    location /lua_rewrite_2 {
        default_type "text/html";
        rewrite_by_lua_file /opt/openresty/openresty-example/lua/test_8_rewrite_by_lua_2.lua;
        echo "rewrite2 uri : $uri, a : $arg_a，b : $arg_b";
    }

    #rewrite_by_lua 功能测试3
    location /lua_rewrite_3 {
        default_type "text/html";
        rewrite_by_lua_file /opt/openresty/openresty-example/lua/test_8_rewrite_by_lua_3.lua;
        echo "rewrite3 uri : $uri";
    }

    #/access_by_lua 功能测试
    location /lua_access {
        default_type "text/html";
        access_by_lua_file /opt/openresty/openresty-example/lua/test_9_access.lua;
        echo "access";
    }

    #Lua模块测试
    location /module_test {
        default_type "text/html";
        lua_code_cache on;
        content_by_lua_file /opt/openresty/openresty-example/lua/test_10_module.lua;
    }

    #Lua Redis模块测试
    location /lua_redis_test {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_11_redis.lua;
    }

    #Lua Redis Pipeline测试
    location /lua_redis_pipeline_test {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_12_redis.lua;
    }

    #Lua Redis Eval测试
    location /lua_redis_eval_test {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_13_redis.lua;
    }

    #Lua Redis SHAEval测试
    location /lua_redis_shaeval_test {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_14_redis.lua;
    }

    #Lua Mysql 测试
    location /lua_mysql_test {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_15_mysql.lua;
    }

    #Lua Mysql loadfile测试
    location /lua_mysql_test2 {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_16_mysql.lua;
    }

    #Lua Http 客户端测试
    location /lua_http_test1 {
        default_type "text/html";
        content_by_lua_file /opt/openresty/openresty-example/lua/test_17_http.lua;
    }

    #Lua ngx.location.capture 测试Http请求
    location ~ /proxy/(.*) {
        #default_type "text/html";
        #internal表示只能内部访问，即外部无法通过url访问进来； 并通过proxy_pass将请求转发到upstream。
        #此用例有毒，好像跟本无法正常访问，反正知道有这么回事就行了。
        internal;
        proxy_set_header Host            $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_pass http://dddd/$1$is_args$args;
    }

    #Lua ngx.location.capture 测试
    #访问如http://192.168.1.2/lua_http_2进行测试可以看到淘宝搜索界面。
    location /lua_http_test2 {
       default_type 'text/html';
       content_by_lua_file /opt/openresty/openresty-example/lua/test_18_capture.lua;
    }

}